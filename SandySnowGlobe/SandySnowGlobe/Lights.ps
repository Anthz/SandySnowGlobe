#define NUM_LIGHTS 2

Texture2D textureID;
SamplerState sampleState;

cbuffer LightBuffer
{
	float4 sDiffuseColour;
	float3 sLightDirection;
	float sSpecularIntensity;
	float4 sSpecularColour;
	float4 mDiffuseColour;
	float3 mLightDirection;
	float mSpecularIntensity;
	float4 mSpecularColour;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 texCoord : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 ps_main(PixelInputType input) : SV_TARGET
{
	float4 colour, colour1, colour2;
	float4 specular, specular1, specular2;
	float4 texColour = textureID.Sample(sampleState, input.texCoord);

	specular1 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	specular2 = float4(0.0f, 0.0f, 0.0f, 0.0f);

	float3 lightDir = -sLightDirection;
	float intensity = saturate(dot(input.normal, lightDir));

	if(intensity > 0.0f)
	{
		colour1 = saturate(sDiffuseColour * intensity);
		float3 reflection = normalize(2 * intensity * input.normal - lightDir);
		specular1 = pow(saturate(dot(reflection, input.viewDirection)), sSpecularIntensity);
		specular1 *= sSpecularColour;
	}

	float3 lightDir2 = -mLightDirection;
	float intensity2 = saturate(dot(input.normal, lightDir2));

	if(intensity > 0.0f)
	{
		colour2 = saturate(mDiffuseColour * intensity2);
		float3 reflection = normalize(2 * intensity2 * input.normal - lightDir);
		specular2 = pow(saturate(dot(reflection, input.viewDirection)), mSpecularIntensity);
		specular2 *= mSpecularColour;
	}

	colour = saturate((colour1 + colour2) + (specular1 + specular2));
	colour *= texColour;

	return colour;
}