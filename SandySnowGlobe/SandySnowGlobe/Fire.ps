Texture2D colourTexture;
Texture2D noiseTexture;
Texture2D alphaTexture;
SamplerState sampleState;	//wrap
SamplerState sampleState2;	//clamp

cbuffer DistortionBuffer
{
    float2 distortion1;
    float2 distortion2;
    float2 distortion3;
    float distortionScale;
    float distortionBias;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 texCoord : TEXCOORD0;
	float2 texCoords1 : TEXCOORD1;
    float2 texCoords2 : TEXCOORD2;
    float2 texCoords3 : TEXCOORD3;
	float4 colour : COLOR;
};

float4 ps_main(PixelInputType input) : SV_TARGET
{
	float4 noise1 = noiseTexture.Sample(sampleState, input.texCoords1);
    float4 noise2 = noiseTexture.Sample(sampleState, input.texCoords2);
    float4 noise3 = noiseTexture.Sample(sampleState, input.texCoords3);

	//(0, 1) range to the (-1, +1) range
    noise1 = (noise1 - 0.5f) * 2.0f;
    noise2 = (noise2 - 0.5f) * 2.0f;
    noise3 = (noise3 - 0.5f) * 2.0f;

    noise1.xy = noise1.xy * distortion1.xy;
    noise2.xy = noise2.xy * distortion2.xy;
    noise3.xy = noise3.xy * distortion3.xy;

    float4 finalNoise = noise1 + noise2 + noise3;

    float distortion = ((1.0f - input.texCoord.y) * distortionScale) + distortionBias;

	float2 noiseCoords = (finalNoise.xy * distortion) + input.texCoord.xy;

    float4 fireColor = colourTexture.Sample(sampleState2, noiseCoords.xy);
    float4 alphaColor = alphaTexture.Sample(sampleState2, noiseCoords.xy);

    fireColor.a = alphaColor;
	
    return fireColor;
}